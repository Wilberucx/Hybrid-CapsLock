;===============================================================================
; SCRIPT: Hybrid CapsLock Productivity (Vim Style) - AutoHotkey v2
; AUTHOR: Wilber Canto (Vibe Codding)
; VERSION: 6.3-v2 (AutoHotkey v2 Migration)
;===============================================================================
;
; _DOC: This script transforms the CapsLock key into a powerful productivity
;       tool with a hybrid behavior. Migrated to AutoHotkey v2 for improved
;       performance and modern syntax.
;
; V6.3-v2 CHANGELOG:
; - Migrated from AutoHotkey v1 to v2
; - Improved syntax and performance
; - Maintained full compatibility with existing .ini configuration files
; - Enhanced error handling and debugging capabilities
;
;===============================================================================

;-------------------------------------------------------------------------------
; SECTION 1: INITIAL CONFIGURATION (v2)
;-------------------------------------------------------------------------------
#SingleInstance Force
#Warn All
; SendMode Input  ; v2 uses Input mode by default, no need to set explicitly
; Note: A_StringCaseSense is read-only in v2 and defaults to true

; Ensure we're on AutoHotkey v2.x
if (SubStr(A_AhkVersion, 1, 1) != "2") {
    MsgBox("This script requires AutoHotkey v2.x.`nYou are running v" . A_AhkVersion . ".`nInstall AutoHotkey v2.0+ and try again.", "HybridCapsLock v2", "IconX")
    ExitApp()
}

; _DOC: Run as admin to prevent permission issues.
; Uncomment the following lines if admin privileges are required:
;if (!A_IsAdmin) {
;    Run("*RunAs `"" . A_ScriptFullPath . "`"")
;    ExitApp()
;}

; _DOC: Permanently disable the native CapsLock function.
; Startup banner to confirm correct script loaded
ShowCenteredToolTip("HybridCapsLock v2 loaded`n" . A_ScriptFullPath)
SetTimer(RemoveToolTip, -1500)  ; Negative value for one-time execution
SetCapsLockState("AlwaysOff")

;-------------------------------------------------------------------------------
; SECTION 2: GLOBAL VARIABLES (v2)
;-------------------------------------------------------------------------------

; _DOC: Global variables to control layer states.
global isNvimLayerActive := false
global _tempEditMode := false
global VisualMode := false

; Leader state flags
global leaderActive := false

; Global variables for temporary status tracking
global currentTempStatus := ""
global tempStatusExpiry := 0

; Excel/Accounting layer state
global excelLayerActive := false

; Variable to track if CapsLock was held beyond the threshold
global capsLockWasHeld := false

; Click derecho sostenido state
global rightClickHeld := false

; Scroll mode state
global scrollModeActive := false

; Configuration file paths - maintain compatibility with v1
global ConfigIni := A_ScriptDir . "\config\configuration.ini"
global ProgramsIni := A_ScriptDir . "\config\programs.ini"
global TimestampsIni := A_ScriptDir . "\config\timestamps.ini"
global InfoIni := A_ScriptDir . "\config\information.ini"
global CommandsIni := A_ScriptDir . "\config\commands.ini"
global ObsidianIni := A_ScriptDir . "\config\obsidian.ini"

; Layer status file for Zebar integration
global LayerStatusFile := A_ScriptDir . "\data\layer_status.json"

; Guard para operador yank secuencial
global _yankAwait := false

; Toggle to let CapsLock behave as original toggle key
global capsActsNormal := false

;-------------------------------------------------------------------------------
; SECTION 3: HELPER FUNCTIONS (v2 - Basic Implementation)
;-------------------------------------------------------------------------------

; Basic tooltip function for startup
ShowCenteredToolTip(Text) {
    ToolTipX := A_ScreenWidth // 2
    ToolTipY := A_ScreenHeight - 100
    ToolTip(Text, ToolTipX, ToolTipY)
}

; Timer function to remove tooltip
RemoveToolTip() {
    ToolTip()
}

; Placeholder for UpdateLayerStatus function
UpdateLayerStatus() {
    ; TODO: Implement layer status update for Zebar integration
    ; This will be implemented in later phases
}

; Placeholder for configuration reading
ReadConfigValue(section, key, defaultValue := "") {
    ; TODO: Implement configuration reading from .ini files
    ; This will be implemented in later phases
    return defaultValue
}

; Status notification functions (Phase 2 implementation)
ShowCopyNotification() {
    ShowCenteredToolTip("COPIED")
    SetTimer(RemoveToolTip, -800)
}

ShowLeftClickStatus(isActive) {
    if (isActive) {
        ShowCenteredToolTip("LEFT CLICK HELD")
    } else {
        ShowCenteredToolTip("LEFT CLICK RELEASED")
    }
}

ShowRightClickStatus(isActive) {
    ShowCenteredToolTip("RIGHT CLICK")
}

ShowCapsLockStatus(isNormal) {
    if (isNormal) {
        ShowCenteredToolTip("CAPSLOCK NORMAL MODE")
    } else {
        ShowCenteredToolTip("CAPSLOCK HYBRID MODE")
    }
}

ShowProcessTerminated() {
    ShowCenteredToolTip("PROCESS TERMINATED")
}

SetTempStatus(status, duration) {
    global currentTempStatus, tempStatusExpiry
    currentTempStatus := status
    tempStatusExpiry := A_TickCount + duration
}

;-------------------------------------------------------------------------------
; SECTION 4: MODIFIER MODE HOTKEYS (v2 - Phase 2)
;-------------------------------------------------------------------------------

; ----- Window Functions -----
CapsLock & 1::WinMinimize("A")
CapsLock & `::Send("#m")  ; Minimize all windows
CapsLock & q::Send("!{F4}")  ; Close window (Alt+F4)

; Maximize/Restore toggle
CapsLock & f:: {
    winState := WinGetMinMax("A")
    if (winState = 1)
        WinRestore("A")
    else
        WinMaximize("A")
}

; ----- Basic Navigation (Vim Style) -----
CapsLock & h::Send("{Left}")
CapsLock & j::Send("{Down}")
CapsLock & k::Send("{Up}")
CapsLock & l::Send("{Right}")

; ----- Smooth Scrolling -----
CapsLock & e::Send("{WheelDown 3}")
CapsLock & d::Send("{WheelUp 3}")

; ----- Common Shortcuts (Ctrl equivalents) -----
CapsLock & a::Send("^a")  ; Select all
CapsLock & s::Send("^s")  ; Save
CapsLock & c:: {
    Send("^c")  ; Copy
    ShowCopyNotification()
}
CapsLock & v::Send("^v")  ; Paste
CapsLock & x::Send("^x")  ; Cut
CapsLock & z::Send("^z")  ; Undo
CapsLock & o::Send("^o")  ; Open
CapsLock & t::Send("^t")  ; New tab
CapsLock & r::Send("{F5}")  ; Refresh

; ----- Enhanced Alt+Tab -----
CapsLock & Tab:: {
    ; Start Alt+Tab sequence
    Send("{Alt down}{Tab}")
    
    ; Wait for Tab to be released
    KeyWait("Tab")
    
    ; Continue Alt+Tab while CapsLock is held
    while GetKeyState("CapsLock", "P") {
        if GetKeyState("Tab", "P") {
            Send("{Tab}")
            KeyWait("Tab")
        }
        Sleep(10)
    }
    
    ; Release Alt
    Send("{Alt up}")
}

; ----- Click Functions -----
CapsLock & `;:: {
    ; Start left click hold
    Click("Left", , , 1, 0, "D")  ; Down
    rightClickHeld := true
    ShowLeftClickStatus(true)
    SetTempStatus("LEFT CLICK HELD", 1200)
    SetTimer(RemoveToolTip, -1200)
    
    ; Wait for release
    KeyWait("CapsLock")
    KeyWait(";")
    
    ; Release left click
    Click("Left", , , 1, 0, "U")  ; Up
    rightClickHeld := false
    ShowLeftClickStatus(false)
    SetTimer(RemoveToolTip, -1200)
}

CapsLock & ':: {
    ; Simple right click
    Click("Right")
    ShowRightClickStatus(true)
    SetTempStatus("RIGHT CLICK", 1200)
    SetTimer(RemoveToolTip, -1200)
}

; ----- Additional Shortcuts -----
CapsLock & 2::Send("^+!{2}")
CapsLock & 3::Send("!a")
CapsLock & 4::Send("!s")
CapsLock & i::Send("^!k")
CapsLock & w::Send("^w")
CapsLock & m::Send("^{PgDn}")
CapsLock & u::Send("^{PgUp}")
CapsLock & [::Send("^!+{[}")
CapsLock & ]::Send("^!+{]}")

; ----- Window Management (GlazeWM) -----
CapsLock & Left::Send("!+h")
CapsLock & Up::Send("!+k")
CapsLock & Down::Send("!+j")
CapsLock & Right::Send("!+l")

; ----- Utility Functions -----
CapsLock & \::SendText("your.email@example.com")
CapsLock & p::Send("+!p")
CapsLock & Enter::Send("^{Enter}")
CapsLock & 9::Send("#+s")
CapsLock & 6::Send("#{Left}")
CapsLock & 7::Send("#{Right}")
CapsLock & Backspace::Send("!{Left}")

; ----- Address Bar Copy (CapsLock & 5) -----
CapsLock & 5:: {
    winClass := WinGetClass("A")
    if (InStr(winClass, "CabinetWClass") || InStr(winClass, "ExploreWClass")) {
        Send("!d")
        Sleep(100)
        Send("^c")
        Sleep(50)
        Send("{Esc}")
    } else {
        Send("^l")
        Sleep(100)
        Send("^c")
        Sleep(50)
        Send("{Esc}")
    }
}

; ----- CapsLock Toggle (F10) -----
CapsLock & F10:: {
    global capsActsNormal
    capsActsNormal := !capsActsNormal
    if (capsActsNormal) {
        SetCapsLockState("Off")
        ShowCapsLockStatus(true)
    } else {
        SetCapsLockState("AlwaysOff")
        ShowCapsLockStatus(false)
    }
    SetTimer(RemoveToolTip, -1200)
}

; ----- Process Termination (F12) -----
CapsLock & F12:: {
    activePid := WinGetPID("A")
    if (activePid) {
        ProcessClose(activePid)
        ShowProcessTerminated()
        SetTimer(RemoveToolTip, -1500)
    }
}

;-------------------------------------------------------------------------------
; SECTION 5: HYBRID LOGIC (v2 - Placeholder for Phase 3)
;-------------------------------------------------------------------------------

; TODO: Phase 3 will implement the core tap vs hold logic
; This is the critical functionality that enables the hybrid behavior

;-------------------------------------------------------------------------------
; SECTION 6: LAYER IMPLEMENTATIONS (v2 - Placeholder for Phases 4-7)
;-------------------------------------------------------------------------------

; TODO: Phase 4 - Nvim Layer
; TODO: Phase 5 - Programs Layer  
; TODO: Phase 6 - Specialized Layers (Windows, Excel, Timestamp, Information)
; TODO: Phase 7 - Commands Layer

;-------------------------------------------------------------------------------
; SECTION 7: INTEGRATION (v2 - Placeholder for Phase 8)
;-------------------------------------------------------------------------------

; TODO: Phase 8 - Zebar integration, tooltips, optimization

;===============================================================================
; MIGRATION STATUS: PHASE 2 COMPLETED
;===============================================================================
; ✅ PHASE 1: Basic v2 structure established
; ✅ PHASE 1: Global variables migrated
; ✅ PHASE 1: Configuration file paths set up
; ✅ PHASE 1: Basic helper functions implemented
; ✅ PHASE 1: Version detection for v2
; ✅ PHASE 1: Startup banner working
;
; ✅ PHASE 2: Window functions migrated (minimize, maximize, close)
; ✅ PHASE 2: Basic navigation (hjkl) implemented
; ✅ PHASE 2: Smooth scrolling migrated
; ✅ PHASE 2: Common shortcuts (Ctrl equivalents) implemented
; ✅ PHASE 2: Enhanced Alt+Tab migrated
; ✅ PHASE 2: Click functions (left hold, right click) implemented
; ✅ PHASE 2: Additional shortcuts and utilities migrated
; ✅ PHASE 2: Status notification functions implemented
;
; NEXT: Phase 3 - Implement hybrid logic (tap vs hold)
;===============================================================================